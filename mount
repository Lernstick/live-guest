#!/bin/sh 

set -e

. /usr/share/live-guest/functions
source_parts /etc/live-guest.d

mkdir_if_not() {
  [ -d $1 ] || mkdir -p $1
}

on_error() {
  log notice "Something bad happend, failure trap activated, aborting."
  cleanup_and_exit 1
}

cleanup_and_exit() {

  [ -z "$1" ] && exitcode=$1 || exitcode=1

  log notice "Cleaning up and unmounting partitions."

  remove_user

  for mp in ${BINDMOUNTS} ; do
    umount $mp || true
  done

  for mp in ${MOUNTPOINTS} ; do
    umount_and_remove $mp
  done
  rm ${LOCKFILE} && true
  
  # remove trap on exit to avoid rerunning it
  trap '' 0

  log notice "Done cleaning up."
  exit $exitcode
}

start_log

DEVNAME="$1"

if [ -z "${DEVNAME}" ] ; then
  log notice "No device given. Exiting."
  exit 1
fi

log notice "Checking disk ${DEVNAME} for Debian Live system."

# Check if a user session is running, exit if someone is logged in
SESSION_ID=$(loginctl list-sessions | grep 1000 | tr -s ' ' | cut -d' ' -f 2)
if loginctl show-session "$SESSION_ID" 2>/dev/null | grep "Service=gdm" >/dev/null; then
    log notice "A user session is running, exiting."
    exit 0
fi

# check lock file
if [ -f ${LOCKFILE} ] ; then
  LOCKDEV=$(cat ${LOCKFILE})

  # exit if our device is not the locked device and the locked
  # device still exists
  if [ "${LOCKDEV}" != "${DEVNAME}" -a -b ${LOCKDEV} ] ; then
      log notice "Another Debian Live guest system is already mounted."
      exit 0
  fi
fi

# unmount and remove lockfile if something fails
trap on_error 0 INT TERM

# Lock the device
echo ${DEVNAME} > ${LOCKFILE}

# give the device some time to settle
sleep 1

roopt="rr"
rofsstring=""
PARTITIONS=$(ls $DEVNAME?)
MOUNTPOINTS=""
for p in ${PARTITIONS} ; do
  log debug "Checking partition: ${p}."

  # check if the partition is already mounted
  grep -q ${p} /proc/mounts && log debug "Partition ${p} already mounted." && continue
 
  # check for COW partition
  # wait at most 5s for the label to be detected
  rounds=20
  for i in $(seq ${rounds}); do
    # blkid sometimes fails to get the label because the device is still not settled
    if LABEL=$(blkid -o value -s LABEL ${p}) ; then
      # the label was found
      break
    else
      if [ ${i} -lt ${rounds} ] ; then
        # no label was found, wait a little before retrying
        log debug "no partition label was found in round $i, retrying..."
        sleep 0.25s
      else
        # giving up
        log info "No partition label found for ${p}."
      fi
    fi
  done
  log debug "Partition $p, Label: $LABEL"
  if [ -z "${COWDEV}" -a \( "$LABEL" = "live-rw" -o "$LABEL" = "persistence" \) ] ; then

     # Do an automatic fsck for cow paritions, live-boot does the same...
     fsck -y "${COWDEV}"

     mkdir_if_not ${MOUNT_COW_DIR}
     mount ${p} ${MOUNT_COW_DIR}
     MOUNTPOINTS="${MOUNT_COW_DIR} ${MOUNTPOINTS}"
     COWDEV=${p}
     log notice "Mounted COW partition ${p} on ${COW_MOUNT_DIR}"
     continue
  fi

  # try to mount volume
  MOUNT_DIR="${MOUNT_PARTITIONS_DIR}/$(basename ${p})"
  mkdir_if_not ${MOUNT_DIR}
  mount ${p} ${MOUNT_DIR}
  MOUNTPOINTS="${MOUNT_DIR} ${MOUNTPOINTS}"
  log notice "Mounted partition ${p} on ${MOUNT_DIR}, now scanning for live filesystems."
  
  # check for live directory
  image_string=""
  if [ -d ${MOUNT_DIR}/live ] ; then
    # scan for filesystem images
    for FILESYSTEM in squashfs ext2 ext3 ext4 xfs jffs2 ; do
      for IMAGE in "${MOUNT_DIR}/live"/*."${FILESYSTEM}" ; do
        if [ -e "${IMAGE}" ] ; then
          image_string="${image_string} ${IMAGE}"
        fi
      done
    done

    if [ -n "${image_string}" ] ; then
      # mount filesystem images
      for image in ${image_string} ; do
        imagename=$(basename "${image}")
        MOUNT_IMAGE_DIR="${MOUNT_BASE_DIR}/${imagename}"
        mkdir_if_not ${MOUNT_IMAGE_DIR}
        mount -o loop,ro,noatime ${image} ${MOUNT_IMAGE_DIR}
        MOUNTPOINTS="${MOUNT_IMAGE_DIR} ${MOUNTPOINTS}"
        log notice "Mounted live filesystem image ${image} on ${MOUNT_IMAGE_DIR}."
        rofsstring="${MOUNT_IMAGE_DIR}=${roopt}:${rofsstring}"
      done
      continue
    fi
  fi

  # nothing interesting here, unmount
  umount ${p} && rmdir ${MOUNT_DIR}
  MOUNTPOINTS=$(for m in ${MOUNTPOINTS} ; do [ "$m" != "${MOUNT_DIR}" ] && echo $m ; done) || true
  log notice "Unmounting partition ${p}. No live filesystems or COW partitions found."

done

# check if we found a COW and a root partition
if [ -z "${COWDEV}" ] ; then
  log notice "No COW partition found. Exiting."
  cleanup_and_exit 0
elif [ -z "${rofsstring}" ] ; then
  log notice "No Debian live filesystem images found. Exiting."
  cleanup_and_exit 0
fi

# create root mount point
mkdir_if_not ${MOUNT_ROOT_DIR}

# Assemble aufs stacked filesystem
mount -t ${UNIONTYPE} -o noatime,noxino,dirs=${MOUNT_COW_DIR}=rw:${rofsstring%:} ${UNIONTYPE} "${MOUNT_ROOT_DIR}"
MOUNTPOINTS="${MOUNT_ROOT_DIR} ${MOUNTPOINTS}"
log notice "Assembled Debian Live union filesystem on ${MOUNT_ROOT_DIR}"

# run the Debian live user setup script to create a user on non intialized medias
# only if /home/user does not exist yet...
# run this chrooted to the assembled filesystem
if [ ! -d "${MOUNT_ROOT_DIR}"/home/user -a -x "${USER_SETUP_SCRIPT}" ] ; then
  log debug "Running ${USER_SETUP_SCRIPT} in chroot."
  for mp in sys proc dev ; do
    mount -o bind /$mp "${MOUNT_ROOT_DIR}"/$mp
    BINDMOUNTS="${MOUNT_ROOT_DIR}/$mp ${BINDMOUNTS}"
  done

  export LIVE_USERNAME=user
  export LIVE_USER_FULLNAME="Debian Live user"
  export _PASSWORD=${LIVE_GUEST_PW_CRYPT}
  chroot "${MOUNT_ROOT_DIR}" "${USER_SETUP_SCRIPT}"

  for mp in sys proc dev ; do
    umount "${MOUNT_ROOT_DIR}"/$mp
    BINDMOUNTS=$(for m in ${BINDMOUNTS} ; do [ "$m" != "${MOUNT_ROOT_DIR}/$mp" ] && echo $m ; done) || true
  done
fi

# create guest user if it does not yet exist
getent passwd ${USER} > /dev/null || useradd -p "" ${USER} -s /bin/bash \
  && log debug "Created Guest Live user."

# Add user the default groups, get groups from debconf database
groups=$(echo "GET passwd/user-default-groups" | debconf-communicate | cut -c3- )
log debug "Adding ${USER} user to groups $groups."
for g in $groups; do
    adduser "$USER" "$g" || true
done

# create and chown home directory
log debug "Creating home directory for ${USER} user."
[ -d /home/${USER} ] || mkdir /home/${USER}
chown ${USER}:${USER} /home/${USER}

# copy password from guest stick
log debug "Copying password."
PW=$(egrep ^user: ${MOUNT_ROOT_DIR}/etc/shadow | cut -f 2 -d :)
usermod --password="$PW" ${USER}

# copy gecos from guest stick
log debug "Copying GECOS."
GECOS=$(egrep ^user: ${MOUNT_ROOT_DIR}/etc/passwd | cut -f 5 -d : | cut -f 1 -d ,)
chfn -f "${GECOS} (Guest)" ${USER}

# bind mount to home directory
log debug "Mounting home directory with bindfs."
bindfs -o nonempty --map=user/${USER}:@user/@${USER} ${MOUNT_ROOT_DIR}/home/user /home/${USER}
MOUNTPOINTS="/home/${USER} ${MOUNTPOINTS}"

# run custom scripts
log info "Running custom scripts."
for dir in /usr/share/live-guest/mount.d /usr/local/share/live-guest/mount.d ; do
    [ -d ${dir} ] && run-parts --arg="mount" ${dir} 2>&1 | logger -t live-guest -p user.notice
done

restart_dm="true"
# this logs in the live-guest user if the password was not changed from
# the default debian-live pw
if pgrep -fx "/usr/bin/kdm( .*)?" && [ "${PW}" = "${LIVE_GUEST_PW_CRYPT}" ] ; then
    log notice "Trying to log in the live-guest user."
    if kdmctl login :0 now live-guest "${LIVE_GUEST_PW}" ; then
	restart_dm="false"
    fi
fi

# kill display manager greeter to show the new user if necessary
if [ "${restart_dm}" = "true" ] ; then
    log debug "Restarting display managers."
    notify_dm
fi

trap '' 0 INT TERM

log notice "Finished mounting guest Debian Live system."
